Documentação - Jive SDK FlutterFlow

Configure sua conta com firebase para utilização das push notification (obrigatório pela Jive SDK)

1. Adicione as dependências:
	firebase_messaging: ^15.1.5
	jivosdk_plugin: ^1.0.0
	stream_chat_flutter: ^9.16.0

2. Configure a permissão de notificação no flutterflow

3. Adicione a Custom Action 'jivoSetupAndOpen' no FlutterFlow e configure seus dados corretamente.

4. Ao chamar a Custom Action 'jivoSetupAndOpen', solicite a permissão de notificação

5. No custom code/Configuration Files/android/proguard-rules.pro adicione:

# ==== Jivo SDK & dependências ====
-keep class com.jivosite.** { *; }
-dontwarn com.jivosite.**

# PhotoView (trazido pelo Jivo)
-keep class com.github.chrisbanes.photoview.** { *; }
-dontwarn com.github.chrisbanes.photoview.**

# OkHttp/Okio/Retrofit (comuns em SDKs)
-keep class okhttp3.** { *; }
-dontwarn okhttp3.**
-keep class okio.** { *; }
-dontwarn okio.**
-keep class retrofit2.** { *; }
-dontwarn retrofit2.**

# AndroidX comuns (lifecycle/core via reflexão)
-keep class androidx.lifecycle.** { *; }
-keep class androidx.core.** { *; }
-keep class androidx.fragment.app.** { *; }

# Anotações/reflexão
-keepattributes *Annotation*,InnerClasses,EnclosingMethod,Signature

6. No custom code/Configuration Files/android/build.gradle adicione:

plugins {
   id "com.android.application"
   id "kotlin-android"
   id "dev.flutter.flutter-gradle-plugin"
   id "com.google.gms.google-services"  // Google Services plugin
}

/* ==== JITPACK REPOSITORY ==== */
repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}
/* ==== FIM JITPACK REPOSITORY ==== */

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.mycompany.infectocastapp"
    compileSdkVersion 35

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "com.mycompany.infectocastapp"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    /* ==== ÚNICO buildTypes (minify OFF só para testar o crash no device) ==== */
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled false   // teste: OFF
            shrinkResources false // teste: OFF
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.1.0"
    api platform('com.google.firebase:firebase-bom:32.7.2')
    api 'com.google.firebase:firebase-messaging'
}


7. No arquivo android/AndroidManifest.xml adicione:

  <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
  <uses-permission android:name="android.permission.READ_MEDIA_IMAGES"/>
  <uses-permission android:name="android.permission.READ_MEDIA_VIDEO"/>
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32"/>
  <application
    android:label="infectocast-app"
    tools:replace="android:label"
    android:icon="@mipmap/ic_launcher"
    android:requestLegacyExternalStorage="true"
  >
8. Verifique se o arquivo google-services.json está na pasta android/app

9. exporte seu apk flutter build apk
