// Automatic FlutterFlow imports
import '/backend/schema/structs/index.dart';
import '/backend/supabase/supabase.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/widgets/index.dart'; // Imports other custom widgets
import '/custom_code/actions/index.dart'; // Imports custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom widget code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

class FFDraggableSheet extends StatefulWidget {
  const FFDraggableSheet({
    Key? key,
    this.initialChildSize = 0.35,
    this.minChildSize = 0.2,
    this.maxChildSize = 0.9,
    this.backgroundColor,
    this.radius = 16.0,
    this.showGrabber = true,
    this.width, // largura opcional (útil na Web). null => 100%
    this.height, // compatibilidade com FF; Draggable usa frações de altura
    this.content, // agora é Widget Function()?
  }) : super(key: key);

  /// Frações da altura da tela (0.0 a 1.0)
  final double initialChildSize;
  final double minChildSize;
  final double maxChildSize;

  /// Estilo
  final Color? backgroundColor;
  final double radius;
  final bool showGrabber;

  /// Largura fixa opcional (útil na Web)
  final double? width;

  /// Altura (somente compat). O DraggableScrollableSheet usa frações.
  final double? height;

  /// Conteúdo vindo do FlutterFlow: geralmente vem como `() => Builder(...)`
  final Widget Function()? content;

  @override
  State<FFDraggableSheet> createState() => _FFDraggableSheetState();
}

class _FFDraggableSheetState extends State<FFDraggableSheet> {
  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: widget.initialChildSize
          .clamp(widget.minChildSize, widget.maxChildSize),
      minChildSize: widget.minChildSize,
      maxChildSize: widget.maxChildSize,
      // sem `snap:` por compatibilidade ampla com versões do FlutterFlow
      builder: (context, scrollController) {
        final child = widget.content?.call() ?? const SizedBox.shrink();

        final sheet = Container(
          decoration: BoxDecoration(
            color: widget.backgroundColor ?? Theme.of(context).canvasColor,
            borderRadius: BorderRadius.vertical(
              top: Radius.circular(widget.radius),
            ),
            boxShadow: const [BoxShadow(blurRadius: 14, color: Colors.black26)],
          ),
          child: Column(
            children: [
              if (widget.showGrabber) ...[
                const SizedBox(height: 8),
                Container(
                  width: 44,
                  height: 4,
                  decoration: BoxDecoration(
                    color: Colors.grey.shade400,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
                const SizedBox(height: 8),
              ],
              Expanded(
                child: SingleChildScrollView(
                  controller: scrollController, // obrigatório
                  child: SafeArea(
                    top: false,
                    child: child,
                  ),
                ),
              ),
            ],
          ),
        );

        // Centraliza e aplica largura quando especificada (útil na Web)
        return Center(
          child: SizedBox(
            width: widget.width, // null => largura total
            // height: widget.height, // intencionalmente não aplicado
            child: sheet,
          ),
        );
      },
    );
  }
}
